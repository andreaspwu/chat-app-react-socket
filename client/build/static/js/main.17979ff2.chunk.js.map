{"version":3,"sources":["Chat.js","App.js","index.js"],"names":["Chat","socket","username","room","useState","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","useEffect","on","data","className","map","messageContent","id","type","value","placeholder","onChange","e","target","onKeyPress","key","onClick","io","connect","App","setUsername","setRoom","showChat","setShowChat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA6EeA,MA1Ef,SAAc,GAA6B,IAA3BC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SAAUC,EAAI,EAAJA,KAChC,EAA4CC,mBAAS,IAAG,mBAAjDC,EAAc,KAAEC,EAAiB,KACxC,EAAsCF,mBAAS,IAAG,mBAA3CG,EAAW,KAAEC,EAAc,KAE5BC,EAAW,iDAAG,iGACK,KAAnBJ,EAAqB,gBAStB,OARKK,EAAc,CAClBP,KAAMA,EACNQ,OAAQT,EACRU,QAASP,EACTQ,KACE,IAAIC,KAAKA,KAAKC,OAAOC,WACrB,IACA,IAAIF,KAAKA,KAAKC,OAAOE,cACxB,SAEKhB,EAAOiB,KAAK,eAAgBR,GAAY,OAC9CF,GAAe,SAACW,GAAI,4BAASA,GAAI,CAAET,GAAW,IAC9CJ,EAAkB,IAAG,2CAExB,kBAhBgB,mCAwBjB,OANAc,qBAAU,WACRnB,EAAOoB,GAAG,mBAAmB,SAACC,GAC5Bd,GAAe,SAACW,GAAI,4BAASA,GAAI,CAAEG,GAAI,GACzC,GACF,GAAG,CAACrB,IAGF,sBAAKsB,UAAU,cAAa,UAC1B,sBAAKA,UAAU,cAAa,UAC1B,qBAAKA,UAAU,WACf,4BAAG,iBAEL,qBAAKA,UAAU,YAAW,SACxB,cAAC,IAAc,CAACA,UAAU,oBAAmB,SAC1ChB,EAAYiB,KAAI,SAACC,GAChB,OACE,qBACEF,UAAU,UACVG,GAAIxB,IAAauB,EAAed,OAAS,MAAQ,QAAQ,SAEzD,gCACE,qBAAKY,UAAU,kBAAiB,SAC9B,4BAAIE,EAAeb,YAErB,sBAAKW,UAAU,eAAc,UAC3B,mBAAGG,GAAG,OAAM,SAAED,EAAeZ,OAC7B,mBAAGa,GAAG,SAAQ,SAAED,EAAed,gBAKzC,QAGJ,sBAAKY,UAAU,cAAa,UAC1B,uBACEI,KAAK,OACLC,MAAOvB,EACPwB,YAAY,oBACZC,SAAU,SAACC,GACTzB,EAAkByB,EAAEC,OAAOJ,MAC7B,EACAK,WAAY,SAACF,GACD,UAAVA,EAAEG,KAAmBzB,GACvB,IAEF,wBAAQ0B,QAAS1B,EAAY,SAAC,gBAItC,ECtEMR,EAASmC,IAAGC,QAAQ,2CA8CXC,MA5Cf,WACE,MAAgClC,mBAAS,IAAG,mBAArCF,EAAQ,KAAEqC,EAAW,KAC5B,EAAwBnC,mBAAS,cAAa,mBAAvCD,EAAI,KAAEqC,EAAO,KACpB,EAAgCpC,oBAAS,GAAM,mBAAxCqC,EAAQ,KAAEC,EAAW,KAS5B,OACE,qBAAKnB,UAAU,MAAK,SAChBkB,EAwBA,cAAC,EAAI,CAACxC,OAAQA,EAAQC,SAAUA,EAAUC,KAAMA,IAvBhD,sBAAKoB,UAAU,oBAAmB,UAChC,6BAAI,0BACJ,uBACEI,KAAK,OACLE,YAAY,qBACZC,SAAU,SAACC,GACTQ,EAAYR,EAAEC,OAAOJ,MACvB,IAGF,yBACEE,SAAU,SAACC,GACTS,EAAQT,EAAEC,OAAOJ,MACnB,EAAE,UAEF,wBAAQA,MAAM,aAAY,SAAC,eAC3B,wBAAQA,MAAM,OAAM,SAAC,SACrB,wBAAQA,MAAM,SAAQ,SAAC,WACvB,wBAAQA,MAAM,MAAK,SAAC,WAEtB,wBAAQO,QA9BC,WACE,KAAbjC,GAA4B,KAATC,IACrBF,EAAOiB,KAAK,YAAaf,GACzBuC,GAAY,GAEhB,EAyBkC,SAAC,oBAOrC,EC5CAC,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.17979ff2.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport ScrollToBottom from 'react-scroll-to-bottom'\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState('')\n  const [messageList, setMessageList] = useState([])\n\n  const sendMessage = async () => {\n    if (currentMessage !== '') {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          ':' +\n          new Date(Date.now()).getMinutes(),\n      }\n\n      await socket.emit('send_message', messageData)\n      setMessageList((list) => [...list, messageData])\n      setCurrentMessage('')\n    }\n  }\n\n  useEffect(() => {\n    socket.on('receive_message', (data) => {\n      setMessageList((list) => [...list, data])\n    })\n  }, [socket])\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <div className=\"online\"></div>\n        <p>Live Chat</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent) => {\n            return (\n              <div\n                className=\"message\"\n                id={username === messageContent.author ? 'you' : 'other'}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{messageContent.time}</p>\n                    <p id=\"author\">{messageContent.author}</p>\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Type a message...\"\n          onChange={(e) => {\n            setCurrentMessage(e.target.value)\n          }}\n          onKeyPress={(e) => {\n            e.key === 'Enter' && sendMessage()\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Chat\n","import './App.css'\nimport io from 'socket.io-client'\nimport { useState } from 'react'\nimport Chat from './Chat'\n\nconst socket = io.connect('https://chat-server-prod.up.railway.app')\n\nfunction App() {\n  const [username, setUsername] = useState('')\n  const [room, setRoom] = useState('JavaScript')\n  const [showChat, setShowChat] = useState(false)\n\n  const joinRoom = () => {\n    if (username !== '' && room !== '') {\n      socket.emit('join_room', room)\n      setShowChat(true)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>ðŸ’» CodeRoom</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your name...\"\n            onChange={(e) => {\n              setUsername(e.target.value)\n            }}\n          />\n\n          <select\n            onChange={(e) => {\n              setRoom(e.target.value)\n            }}\n          >\n            <option value=\"JavaScript\">JavaScript</option>\n            <option value=\"Java\">Java</option>\n            <option value=\"Python\">Python</option>\n            <option value=\"C++\">C++</option>\n          </select>\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}